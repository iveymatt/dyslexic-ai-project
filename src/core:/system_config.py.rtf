{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 """\
system_config.py\
Core configuration management for Dyslexic AI\
\
This module handles system-wide configuration, settings management,\
and environment-specific configurations for the Dyslexic AI system.\
"""\
\
from typing import Dict, Any, Optional\
from pathlib import Path\
import yaml\
\
class SystemConfig:\
    """\
    Manages system-wide configuration and settings.\
    \
    Features:\
    - Configuration loading\
    - Environment management\
    - Settings validation\
    - Dynamic updates\
    """\
    \
    def __init__(self, config_path: Optional[str] = None):\
        self.config_path = config_path or "config/default.yaml"\
        self.config: Dict[str, Any] = \{\}\
        self.environment: str = "development"\
        self.loaded_configs: Dict[str, Any] = \{\}\
\
    async def initialize(self) -> None:\
        """Initialize system configuration."""\
        try:\
            # Load base configuration\
            self.config = await self.load_config(self.config_path)\
            \
            # Load environment-specific configuration\
            env_config = await self.load_environment_config(self.environment)\
            \
            # Merge configurations\
            self.config = self.merge_configs(self.config, env_config)\
            \
            # Validate configuration\
            await self.validate_config(self.config)\
            \
        except Exception as e:\
            await self.handle_config_error(e)\
            raise\
\
    async def load_config(self, config_path: str) -> Dict[str, Any]:\
        """\
        Load configuration from file.\
        \
        Args:\
            config_path: Path to configuration file\
            \
        Returns:\
            Dict containing configuration\
        """\
        try:\
            with open(config_path, 'r') as f:\
                return yaml.safe_load(f)\
        except Exception as e:\
            await self.handle_load_error(e, config_path)\
            raise\
\
    async def get_config(\
        self,\
        section: Optional[str] = None\
    ) -> Dict[str, Any]:\
        """\
        Get configuration section or complete config.\
        \
        Args:\
            section: Configuration section to retrieve\
            \
        Returns:\
            Configuration dictionary\
        """\
        if section:\
            return self.config.get(section, \{\})\
        return self.config\
\
    async def update_config(\
        self,\
        updates: Dict[str, Any],\
        section: Optional[str] = None\
    ) -> None:\
        """\
        Update configuration values.\
        \
        Args:\
            updates: Configuration updates to apply\
            section: Section to update\
        """\
        if section:\
            current_section = self.config.get(section, \{\})\
            current_section.update(updates)\
            self.config[section] = current_section\
        else:\
            self.config.update(updates)\
\
        # Validate after updates\
        await self.validate_config(self.config)\
\
    def get_default_config(self) -> Dict[str, Any]:\
        """\
        Get default system configuration.\
        \
        Returns:\
            Default configuration dictionary\
        """\
        return \{\
            "accessibility": \{\
                "default_font": "OpenDyslexic",\
                "line_spacing": 1.5,\
                "contrast_ratio": 4.5,\
                "word_spacing": 1.2\
            \},\
            "processing": \{\
                "max_batch_size": 100,\
                "timeout_seconds": 30,\
                "cache_duration": 3600\
            \},\
            "model": \{\
                "model_type": "dyslexic_llm",\
                "temperature": 0.7,\
                "max_tokens": 2048,\
                "top_p": 0.9\
            \},\
            "security": \{\
                "encryption_enabled": True,\
                "auth_required": True,\
                "session_timeout": 3600\
            \}\
        \}\
\
    async def validate_config(self, config: Dict[str, Any]) -> None:\
        """\
        Validate configuration values.\
        \
        Args:\
            config: Configuration to validate\
        """\
        required_sections = [\
            "accessibility",\
            "processing",\
            "model",\
            "security"\
        ]\
        \
        for section in required_sections:\
            if section not in config:\
                raise ConfigurationError(f"Missing required section: \{section\}")\
\
        # Validate specific settings\
        accessibility = config.get("accessibility", \{\})\
        if not all(key in accessibility for key in [\
            "default_font",\
            "line_spacing",\
            "contrast_ratio",\
            "word_spacing"\
        ]):\
            raise ConfigurationError("Missing required accessibility settings")\
\
    async def handle_config_error(self, error: Exception) -> None:\
        """\
        Handle configuration errors.\
        \
        Args:\
            error: The error that occurred\
        """\
        # Error handling implementation\
        raise NotImplementedError("Error handling to be implemented")\
\
class ConfigurationError(Exception):\
    """Custom exception for configuration errors."""\
    pass}